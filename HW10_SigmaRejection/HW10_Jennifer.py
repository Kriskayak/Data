"""Jennifer YimData Science 2020Sigma Rejection HW"""import pandas as pdimport matplotlib.pyplot as pltimport numpy as npimport scipyfrom scipy.special import erf, erfinvimport statsmodelsfrom statsmodels import robustdf = pd.read_csv("/Users/jennifer/Jen_Data_Science/datasci2020/HW10_SigmaRejection/test_distribution.txt", header=None, names=['data'])len(df) #100 data pointshist = plt.hist(df, alpha=0.6, bins=12)#The histogram looks somewhat skewed to the left, but it is hard to determine if I have any significant outliers.# Median and MAD median = np.median(df)mad = statsmodels.robust.scale.mad(df, center=median) #corrects for the factor of 1.4826 automaticallyerf = scipy.special.erfinv(df) erf.sort_values()erf.sort_values(ascending=False)# Least = -1.68821, Greatest = 1.65148 but I don't really understand what these mean# Rejecting data more than 2 sigma away?: sigma-rejectionsr, lower, upper = scipy.stats.sigmaclip(df, low=2.0, high=2.0)# Median and MAD of sigma-rejectedmedian_sr = np.median(sr)mad_sr = statsmodels.robust.scale.mad(df)# Comparing the original dataset with the sigma-rejected versionprint (median, median_sr) #-0.8363 vs. -1.1389print (mad, mad_sr) #5.0516 vs. 4.7543''' I think the sigma-rejected median and MAD are better estimations of the "true" mean and standard deviation. This is because the median and MAD of the full distribution don't take in account the ouliers that can be rejected with a 3-sigma confidence.  The median and MAD of the sigma-rejected distribution better capture the overall trend of the data, exluding the data points that are considered outliers. ''''''js comments----------- - You are not understanding what the error function is and how it is used. It   returns a probability. The inverse error function is needed.  - There are sigma clip algorithms already written, your task was to understand   how it works by writing your own.  - The sigmaclip parameters were way too stringent, and did not conform to the    directions - The sigma-rejected array is not valid5/20'''"""New edits after class"""df_s = erfinv(0.99)*np.sqrt(2)   # 1 = 100 * (1 - erf(x/np.sqrt(2)))exp_high = median + (mad * df_s)exp_low = median - (mad * df_s)reg_s = erfinv(1 - (0.05/100))*np.sqrt(2) # 0.05 = 100 * (1 - erf(x/np.sqrt(2)))sbound_lower = median - (mad * reg_s)sbound_upper = median + (mad * reg_s)filtered_data = [] # Data that is left after sigma rejectionfor x in df:  if sbound_lower  < x < sbound_upper:    filtered_data.append(x)mean = np.mean(df)std = np.std(df)mean_new = np.mean(filtered_data)std_new = np.std(filtered_data)